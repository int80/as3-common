<?xml version="1.0" encoding="utf-8"?>
<s:DataGrid xmlns:fx="http://ns.adobe.com/mxml/2009" 
			 xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:mx="library://ns.adobe.com/flex/mx"
			 creationComplete="setup()"
			 >
	
	<!--
	    this is a datagrid that remembers its column widths
	-->
	
	<fx:Script source="PersistantStorage.as" />
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.collections.ISort;
			import mx.collections.errors.SortError;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.ScrollPolicy;
			import mx.events.CollectionEvent;
			import mx.events.DataGridEvent;
			import mx.events.IndexChangedEvent;
			
			import spark.collections.Sort;
			import spark.collections.SortField;
			import spark.components.gridClasses.GridColumn;
			import spark.events.GridEvent;
			import spark.events.GridSortEvent;
			
			private var loadingWidths:Boolean = false;
			private var canSaveWidths:Boolean = false;
			
			private var _loadedSort:ISort;
			
			private function setup():void {
				loadSavedColumnWidths();
				loadSavedSorts();
				this.addEventListener(MouseEvent.MOUSE_OUT, saveColumnWidths);
				this.addEventListener(GridSortEvent.SORT_CHANGE, saveSorts);
				
				this.addEventListener(FocusEvent.FOCUS_IN, function (evt:Event):void {
					canSaveWidths = true
				});
			}
			
			public function saveSorts(evt:GridSortEvent):void {
				var dp:ArrayCollection = this.dataProvider as ArrayCollection;
				if (! dp) return;
				
				var so:SharedObject = this.sharedObject;
				if (! so) return;
				
				var sort:spark.collections.Sort = dp.sort as spark.collections.Sort;
				if (! sort) return;
				
				var cols:ArrayList = ArrayList(this.columns);				
				var sortFieldList:Vector.<Object> = new Vector.<Object>;
				for (var i:int = 0; i < cols.length; i++) {
					var col:GridColumn = cols.getItemAt(i) as GridColumn;
					if (! col) {
						trace("failed to get GridColumn for index " + i);
						continue;
					}
					
					// serialize GridCol sort
					sortFieldList.push({
						fieldName: col.dataField,
						descending: col.sortDescending
					});
				}
				
				if (sortFieldList)
					so.data.sortFieldList = sortFieldList;
				else
					so.data.sortFieldList = null;
				
				so.data.sortIndices = evt.columnIndices;
								
				so.flush();
			}
			
			protected var settingSort:Boolean = false;
			override public function set dataProvider(value:IList):void {
				super.dataProvider = value;

				var ac:ArrayCollection = value as ArrayCollection;
				if (! ac) {
					return;
				}
			}
			
			public function loadSavedSorts(evt:Event=null):void {
				var dp:ArrayCollection = this.dataProvider as ArrayCollection;
				
				var so:SharedObject = this.sharedObject;
				if (! so) return;
				
				//if (so.data.sortFieldCount != this.columns.length)
				//	return;
								
				var sortFieldList:Vector.<Object> = so.data.sortFieldList as Vector.<Object>;
				if (! sortFieldList)
					return;
				
				var sortIndices:Vector.<int> = so.data.sortIndices;
				
				var sortFields:Array = [];

				if (sortIndices && sortIndices.length) {
					this.sortByColumns(sortIndices, false);
					if (columnHeaderGroup)
						columnHeaderGroup.visibleSortIndicatorIndices = sortIndices;            
				}
				
				for (var i:int = 0; i < sortIndices.length; i++) {
					var sortIndex:int = sortIndices[i];
					var sortInfo:Object = sortFieldList[sortIndex];
					var col:GridColumn = columns.getItemAt(sortIndex) as GridColumn;
					if (! col) {
						trace("Failed to find GridColumn at index " + i);
						continue;
					}
					
					//trace("descending[" + i + "]: " + sortInfo.descending);
					col.sortDescending = sortInfo.descending;
					
					var name:String = sortInfo.fieldName;
					var descending:Boolean = sortInfo.descending;
					var field:SortField = new SortField(name, descending);
					sortFields.push(field);
				}
								
				// find existing Sort
				var sort:Sort;
				if (dp)
					sort = dp.sort as Sort;
				if (! sort)
					sort = new Sort();
				
				sort.fields = sortFields;
				
				_loadedSort = sort;
			}
			
			public function saveColumnWidths(evt:Event=null):void {
				if (loadingWidths) return;
				
				var so:SharedObject = this.sharedObject;
				if (! so) return;
				
				var cols:ArrayList = ArrayList(this.columns);
				var savedWidths:Array = new Array();
				
				for (var i:int = 0; i < cols.length; i++) {
					var col:GridColumn = GridColumn(cols.getItemAt(i));
					var width:int = col.width;

					if (! width) continue;
					savedWidths[i] = width;
				}
			
				so.data.columnWidths = savedWidths;
				
				so.flush();
				
				//dumpCols();
			}
			
			public function loadSavedColumnWidths():void {
				var so:SharedObject = this.sharedObject;
				if (! so) return;
				
				var cols:ArrayList = ArrayList(this.columns);
				var savedWidths:Array = so.data.columnWidths;
				if (! savedWidths) return;
				
				if (savedWidths.length != cols.length) return;
				
				loadingWidths = true;
				
				// read column widths
				//var origScrollPolicy:String = this.horizontalScrollPolicy;
				//this.horizontalScrollPolicy = ScrollPolicy.ON;
				
				for (var i:int = 0; i < savedWidths.length - 1; i++) {
					var savedWidth:int = savedWidths[i];
					
					if (savedWidth) {
						// found saved column width
						var col:GridColumn = GridColumn(cols.getItemAt(i));
						if (col) col.width = savedWidth;
						//trace("saved width: " + savedWidth);
					}
				}
				
				//this.horizontalScrollPolicy = origScrollPolicy;
				
				loadingWidths = false;
				
				//dumpCols();
			}
			
			private function dumpCols():void {
				var cols:ArrayList = ArrayList(this.columns);
				
				for (var i:int = 0; i < cols.length; i++) {
					var col:GridColumn = GridColumn(cols.getItemAt(i));
					var width:int = col.width;
					trace("col " + i + " width: " + width);
				}
			}
			
			public function get sharedObjectPrefix():String {
				var key:String = "persistantDataGridv1_";
				if (this.id) key += this.id + "_";
				return key;
			}

			public function refresh():void{
				this.setup();
			}

		]]>
	</fx:Script>
</s:DataGrid>
